import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

// Node class representing a room
class Room {
    int roomNumber;
    String guestName; // Empty if the room is not booked
    Room left, right;

    // Constructor
    public Room(int roomNumber) {
        this.roomNumber = roomNumber;
        this.guestName = "";
        left = right = null;
    }
}

// Binary Search Tree for Hotel Room Management
class HotelBST {
    Room root;

    // Insert a room in the BST
    public Room insertRoom(Room root, int roomNumber) {
        if (root == null) {
            return new Room(roomNumber);
        }
        if (roomNumber < root.roomNumber) {
            root.left = insertRoom(root.left, roomNumber);
        } else if (roomNumber > root.roomNumber) {
            root.right = insertRoom(root.right, roomNumber);
        }
        return root;
    }

    // Book a room by assigning guest name
    public void bookRoom(Room root, int roomNumber, String guestName) {
        if (root == null) {
            System.out.println("Room " + roomNumber + " not found!");
            return;
        }
        if (roomNumber == root.roomNumber) {
            if (root.guestName.equals("")) {
                root.guestName = guestName;
                System.out.println("Room " + roomNumber + " is now booked for " + guestName);
            } else {
                System.out.println("Room " + roomNumber + " is already booked!");
            }
        } else if (roomNumber < root.roomNumber) {
            bookRoom(root.left, roomNumber, guestName);
        } else {
            bookRoom(root.right, roomNumber, guestName);
        }
    }

    // Inorder Traversal (Left, Root, Right)
    public void inorder(Room root) {
        if (root != null) {
            inorder(root.left);
            System.out.println("Room " + root.roomNumber + (root.guestName.equals("") ? " is available" : " is booked by " + root.guestName));
            inorder(root.right);
        }
    }

    // Preorder Traversal (Root, Left, Right)
    public void preorder(Room root) {
        if (root != null) {
            System.out.println("Room " + root.roomNumber + (root.guestName.equals("") ? " is available" : " is booked by " + root.guestName));
            preorder(root.left);
            preorder(root.right);
        }
    }

    // Postorder Traversal (Left, Right, Root)
    public void postorder(Room root) {
        if (root != null) {
            postorder(root.left);
            postorder(root.right);
            System.out.println("Room " + root.roomNumber + (root.guestName.equals("") ? " is available" : " is booked by " + root.guestName));
        }
    }

    // Level Order Traversal (Breadth First Search)
    public void levelOrder(Room root) {
        if (root == null) return;
        Queue<Room> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            Room current = queue.poll();
            System.out.println("Room " + current.roomNumber + (current.guestName.equals("") ? " is available" : " is booked by " + current.guestName));
            if (current.left != null) queue.add(current.left);
            if (current.right != null) queue.add(current.right);
        }
    }
}

// Main class to run the Hotel Management System
public class HotelManagementSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HotelBST hotel = new HotelBST();

        // Insert some rooms
        hotel.root = hotel.insertRoom(hotel.root, 101);
        hotel.root = hotel.insertRoom(hotel.root, 102);
        hotel.root = hotel.insertRoom(hotel.root, 103);
        hotel.root = hotel.insertRoom(hotel.root, 104);

        // Book rooms
        hotel.bookRoom(hotel.root, 101, "Alice");
        hotel.bookRoom(hotel.root, 103, "Bob");

        // Display menu
        while (true) {
            System.out.println("\n--- Hotel Management System ---");
            System.out.println("1. Inorder Traversal");
            System.out.println("2. Preorder Traversal");
            System.out.println("3. Postorder Traversal");
            System.out.println("4. Level Order Traversal");
            System.out.println("5. Book a Room");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("Inorder Traversal:");
                    hotel.inorder(hotel.root);
                    break;
                case 2:
                    System.out.println("Preorder Traversal:");
                    hotel.preorder(hotel.root);
                    break;
                case 3:
                    System.out.println("Postorder Traversal:");
                    hotel.postorder(hotel.root);
                    break;
                case 4:
                    System.out.println("Level Order Traversal:");
                    hotel.levelOrder(hotel.root);
                    break;
                case 5:
                    System.out.print("Enter room number: ");
                    int roomNumber = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline
                    System.out.print("Enter guest name: ");
                    String guestName = scanner.nextLine();
                    hotel.bookRoom(hotel.root, roomNumber, guestName);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice, try again.");
            }
        }
    }
}